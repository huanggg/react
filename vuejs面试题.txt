每个钩子函数都在啥时间触发

beforeCreate

在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。

created

实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，
属性和方法的运算， watch/event 事件回调。然而，挂载阶段(模板渲染)还没开始，$el 属性目前不可见。

beforeMount

在挂载开始之前被调用：相关的 render 函数首次被调用。

mounted

模板渲染完成以后才会被调用
el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。

beforeUpdate

数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，
这不会触发附加的重渲染过程。

updated

由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。

当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。
然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。

该钩子在服务器端渲染期间不被调用。

beforeDestroy

实例销毁之前调用。在这一步，实例仍然完全可用。

destroyed

Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，
所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。


 MVVM 的理解

MVVM 由 Model,View,ViewModel 三部分构成，

Model 层代表数据模型，也可以在Model中定义数据和业务逻辑操作；

View 代表UI 组件，它负责将数据模型转化成UI 展现出来，

ViewModel 是一个同步View 和 Model的对象。

在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的

因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。

ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，

因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。


Vue的双向数据绑定原理是什么？（vue响应式原理？）

答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。

具体步骤：

第一步：需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter
这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化

第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图

第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:
1、在自身实例化时往属性订阅器(dep)里面添加自己
2、自身必须有一个update()方法
3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。

第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，
通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。



单页应用的理解？

单页应用也称为SPA是将所有的活动局限于一个Web页面中，仅在该Web页面初始化时加载相应的HTML、JavaScript 和 CSS。
加载完成，页面不在重新加载或跳转，仅仅是里面的组件或模块通过hash,或者history api来进行交互和跳转，
并通过ajax拉取数据来实现响应功能，整个应用就一个html，所以叫单页面！


vuejs是如何实现这种数据驱动的呢？


首先，vuejs在实例化的过程中，会对实例化对象选项中的data 选项进行遍历，遍历其所有属性并使用 Object.defineProperty?把这些属性全部转为 getter/setter。
同时每一个实例对象都有一个watcher实例对象，他会在模板编译的过程中,用getter去访问data的属性，watcher此时就会把用到的data属性记为依赖，
这样就建立了视图与数据之间的联系。当之后我们渲染视图的数据依赖发生改变（即数据的setter被调用）的时候，watcher会对比前后两个的数值是否发生变化，
然后确定是否通知视图进行重新渲染这样就实现了所谓的数据对于视图的驱动。通俗地讲，它意味着我们在普通 HTML 模板中使用特殊的语法将 DOM “绑定”到底层数据。
一旦创建了绑定，DOM 将与数据保持同步。每当修改了数据，DOM 便相应地更新。这样我们应用中的逻辑就几乎都是直接修改数据了，
不必与 DOM 更新搅在一起。这让我们的代码更容易撰写、理解与维护。


nginx 反向代理服务器-》跨域

server {
        listen       8094;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

       location / {
            root   html;
            index  index.html index.htm;
        }
       location /apis {
            rewrite  ^.+apis/?(.*)$ /$1 break;
            include  uwsgi_params;
            proxy_pass   http://localhost:1894;
       }
}

beginPath()  开始一条新的路径
save()  保存之前的canvas状态
restore 恢复之前的vanvas状态

proxyTable: {
            '/api': {
                target: 'http://localhost:7001',//后端接口地址
                changeOrigin: true,//是否允许跨越
                pathRewrite: {
                    '^/api': '/api',//重写,
                }
            }
        },



1、vue响应式原理？
2、vue-router实现原理？
3、为什么要选vue？与其它框架对比的优势和劣势？
4、vue如何实现父子组件通信，以及非父子组件通信？
5、vuejs与angularjs以及react的区别？
6、vuex是用来做什么的？
7、求一个字符串中出现次数最多的字符和次数？
8  父子组件的生命执行顺序？
9  如何提高webpack 构建的构建速度
10 怎么配置单页应用？怎么配置多页应用？
11 flexible 移动端自适应布局插件

  let str='abcdfabfdfadafdfaad';

  function fn(str){
    let obj={}
   for(let i=0;i<str.length;i++){ // 遍历字符串
      var char=str[i] // 获取每个字符
      if( obj[char] ){
        obj[char]++
      }else{
        obj[char]=1 
     }
   }
   console.log(obj)  //{a: 6, b: 2, c: 1, d: 5, f: 5}
   let max=0;
   let maxChar=null
   for(var key in obj){ // 遍历对象，取对象的每个值与max对比
       if( max<obj[key] ){  
         max=obj[key]  //max始终储存次数最大的那个
         maxChar=key   //次数最多的字符就是单前的key
      }  
   }
    console.log("最多的字符是" + maxChar);
    console.log("出现的次数是" + max);
  }
  fn(str)

8、js 实现数组去重

   方式一:

   let attr=[1,2,3,4,2,3,8]

   console.log([...new Set(attr)])

   方式二:
    let attr=[1,2,3,4,2,3,8]
    function uniq(array){    
      let attr=[]
      for(let i=0;i<array.length;i++){ // 遍历数组，取每个数组项  
        if( attr.indexOf(array[i])=== -1 ){   
            attr.push(array[i])  
        }
       }
     return attr
   }

  console.log(uniq(attr))

  方式三:
    let attr=[1,2,3,4,2,3,8]
    
    function uniq(array){
     let obj={}
     let attr=[]
     for(let i=0; i<array.length;i++){ //遍历数组，取每个数组项
        let key=array[i]
        if( !obj[key] ){
          obj[key]=1
          attr.push(key)
        }
     }
    return attr;
    }
  
  console.log(uniq(attr))


9、判断一个单词是否回文

  let str='mamam'

  function checkDrom(str){
   if(str===srt.split('').reverse().join()){
      return true
    }else{
      return false
    }
  }

10 排序算法

 第一种:
  冒泡排序:
  
  let array=[5,2,4,3,1,9,8]

  function bubbleSort(array){ 
   for(let i=0;i<array.length;i++){//第一次遍历数组，控制数组经过多少轮排序
     for(let j=0;j<array.length-1;j++){ //第二次遍历，比较任意相邻两项的大小
       if( array[j]>array[j+1] ){// 交换两项值得位置，值小的项排在前面
          let tem=''
          tem=array[j]
          array[j]=array[j+1]
          array[j+1]=tem
       }
     }
   }
   return array
 }

  第二种：
   快速排序:

   let array=[5,2,4,3,1,9,8]
   
   function quickSort(arr){
   
      if(arr.length<=1){
        return arr
      }
      let leftArr=[]
      let rightArr=[]
      let q=arr[0]
      for(let i=1;i<arr.length;i++){
        if( q < arr[i] ){
          rightArr.push( arr[i] )
        }else{
          leftArr.push( arr[i] )
        }
      }
      return [].concat(quickSort(leftArr),[q],quickSort(rightArr))
 }
  quickSort(array)

11 不借助临时变量，进行两个整数的交换

  function swap(a,b){
    b=b-a;
    a=a+b;
    b=a-b
    return {
     a:a,
     b:b
  }
 }

 swap(4,5)// {a: 5, b: 4}
 
12 九九乘法表的实现
document.write('<table class="table" border="1">');
  for(let i=1;i<=9;i++){
    document.write('<tr>');
    for(let j=1;j<=i;j++){
       document.write('<td>'+i+'x'+j+'='+(j*i)+'</td>');
    }
    document.write('</tr>');
   }
document.write('</table>');


13 js 实现深拷贝
   
   function deepCope(obj){
        let _obj = JSON.stringify(obj),
        objClone = JSON.parse(_obj);
      return objClone  
  }
    let a=[0,1,[2,3],4],
    b=deepClone(a);
