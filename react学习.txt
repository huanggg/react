1 创建工程项目

$ cnpm install -g create-react-app
$ create-react-app my-app
$ cd my-app/
$ npm start

2 暴露config 文件 -> npm run eject (可能要先git commit -m '初始化')

3 安装 react-router-dom 

  $ npm install react-router --save react-router-dom

4 安装状态管理 store 
 
  $ npm install --save redux
  $ npm install --save react-redux
  
 cnpm install axios --save

5 打包

 $ npm run build (可能存在es6未能正确转化为es5的错误)

6 引入 <script
      type="text/javascript"
      src="https://cdn.bootcss.com/babel-polyfill/6.23.0/polyfill.min.js"
    ></script>

7 结合React使用Redux

8 react-router-dom 的使用 

9 使用 elementUi 
  $  npm i element-react --save
  $ npm install element-theme-default --save

   aes加密
10 npm install crypto-js --save-dev

   配置绝对路径
11  alias: {     
        "react-native": "react-native-web",
        "@": path.resolve(__dirname, "../src")      
      },

  package.json 文件中配置代理

12 "proxy": "http://bptest.vanke.com",


13  键盘事件

  onKeyDown={e=> console.log( e.keyCode ) }
 
14 滚动条 npm install react-scrollbar --save

15 父子组件传递参数

   // 子组件
import React, { Component } from "react";
class Child extends Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  handle () { 
    // 往父组件传递一个对象参数,子组件触发一个自定义事件
    this.props.uphandle({
      name:'zhangsan'
    })
  }
  render() {
    return (
      <div className="children">
        <div onClick={this.handle.bind(this)}>{this.props.name}</div>
      </div>
    );
  }
}

export default Child

   // 父组件

import React, { Component } from "react";
import Child from '@/view/child/index.jsx'
class Parent extends Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  handle (obj) { 
    // 往父组件传递一个对象参数
   console.log(obj)
  }
  render() {
    return (
      <div className="parent">
      {/* 父组件监听子组件触发的自定义事件 */}
        <Child name='hello child' uphandle={this.handle.bind(this)} />
      </div>
    );
  }
}

export default Parent 


16 react-router-dom 4.xxx版本 路由跳转并传参
缺点：刷新地址栏，参数丢失

js 跳转 : this.props.history.push({pathname:"/query",query: { name : 'sunny' }});
this.props.location.query.name



优势 ： 刷新地址栏，参数依然存在
this.props.history.push({pathname:"/path/" + name});

读取参数用:this.props.match.params.name


17 react 性能优化

 1 事件绑定
  
   this.handle=this.handle.bind(this)
   handle(){
    console.log(888)
  }
 
  <div onClick={this.handle}>事件触发</div>

2 内联style样式

 let headerStyle={
     width:100px;
     height:100px;
  }

  <div style={headerStyle}>样式优化</div>

3 多组件优化
  shouldComponentUpdate(nextProps.nextState){
     if(nextProps.title===this.props.title){
       return false;
     }else{
       return true;
     }
   
   }
4 reselect 优化

  npm install reselect