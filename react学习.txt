1 创建工程项目

$ cnpm install -g create-react-app
$ create-react-app my-app
$ cd my-app/
$ npm start

2 暴露config 文件 -> npm run eject (可能要先git commit -m '初始化')

3 安装 react-router-dom 

  $ npm install react-router --save react-router-dom

4 安装状态管理 store 
 
  $ npm install --save redux
  $ npm install --save react-redux
  
 cnpm install axios --save

5 打包

 $ npm run build (可能存在es6未能正确转化为es5的错误)

6 引入 <script
      type="text/javascript"
      src="https://cdn.bootcss.com/babel-polyfill/6.23.0/polyfill.min.js"
    ></script>

7 结合React使用Redux

8 react-router-dom 的使用 

9 使用 elementUi 
  $  cnpm i element-react --save
  $ cnpm install element-theme-default --save

   aes加密
10 npm install crypto-js --save-dev

   配置绝对路径
11  alias: {     
        "react-native": "react-native-web",
        "@": path.resolve(__dirname, "../src")      
      },

  package.json 文件中配置代理

12 "proxy": "http://bptest.vanke.com",


13  键盘事件

  onKeyDown={e=> console.log( e.keyCode ) }
 
14 滚动条 npm install react-scrollbar --save

15 父子组件传递参数

   // 子组件
import React, { Component } from "react";
class Child extends Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  handle () { 
    // 往父组件传递一个对象参数,子组件触发一个自定义事件
    this.props.uphandle({
      name:'zhangsan'
    })
  }
  render() {
    return (
      <div className="children">
        <div onClick={this.handle.bind(this)}>{this.props.name}</div>
      </div>
    );
  }
}

export default Child

   // 父组件

import React, { Component } from "react";
import Child from '@/view/child/index.jsx'
class Parent extends Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  handle (obj) { 
    // 往父组件传递一个对象参数
   console.log(obj)
  }
  render() {
    return (
      <div className="parent">
      {/* 父组件监听子组件触发的自定义事件 */}
        <Child name='hello child' uphandle={this.handle.bind(this)} />
      </div>
    );
  }
}

export default Parent 


16 react-router-dom 4.xxx版本 路由跳转并传参
缺点：刷新地址栏，参数丢失

js 跳转 : this.props.history.push({pathname:"/query",query: { name : 'sunny' }});
this.props.location.query.name



优势 ： 刷新地址栏，参数依然存在
this.props.history.push({pathname:"/path/" + name});

读取参数用:this.props.match.params.name
子路由：

 <Router>
                <div>
                    <li>
                        <Link to={`${this.props.match.url}/1?a=${this.state.firstNumber}`}
                              onClick={() => {
                                  console.log('Link 标签（跳转到/1）的 onClick 事件', this.props.location)
                              }}>
                            示例1
                        </Link>
                        <input type="text" value={this.state.firstNumber} onChange={this.changeFirst}/>
                    </li>
                    <li>
                        <Link to={`${this.props.match.url}/2/${this.state.secondNumber}`}
                              onClick={() => {
                                  console.log('Link 标签（跳转到/2）的 onClick 事件', this.props.location)
                              }}>
                            示例2
                        </Link>
                        <input type="text" value={this.state.secondNumber} onChange={this.changeSecond}/>
                    </li>
                    <hr/>

                    <Route path={`${this.props.match.url}/1`} component={First}/>
                    <Route path={`${this.props.match.url}/2/:myParams`} component={Second}/>
                </div>
            </Router>
17 react 性能优化

 1 事件绑定
  
   this.handle=this.handle.bind(this)
   handle(){
    console.log(888)
  }
 
  <div onClick={this.handle}>事件触发</div>

2 内联style样式

 let headerStyle={
     width:100px;
     height:100px;
  }

  <div style={headerStyle}>样式优化</div>

3 多组件优化
  shouldComponentUpdate(nextProps.nextState){
     if(nextProps.title===this.props.title){
       return false;
     }else{
       return true;
     }
   
   }
4 reselect 优化

  npm install reselect



18  react-router4-路由的嵌套和动态传值

   路由嵌套
   1.在组件中需要嵌套路由的地方直接使用Route标签书写路由
   
   /*router.js*/

  import React, { Component } from 'react'
  import { BrowserRouter  as Router, Route, Switch} from 'react-router-dom'
  import Home from './pages/home';

  export default class Routers extends Component {
    render() {
      return (
        <Router>
          <App>
            <Switch>
              <Route path="/home" exact component={Home}></Route>
            </Switch>
          </App>
        </Router>
      )
    }
  }

/*Home组件*/

import React, { Component } from 'react'
import { Route, Switch} from 'react-router-dom'
import Menu from './pages/Menu';

export default class Routers extends Component {
  render() {
    return (
      <div>
        <Route path="/home/menu" component={Menu}></Route>
      </div>
    )
  }
}

 2.使用render函数直接嵌套路由
/*router.js*/

    import React, { Component } from 'react'
    import { BrowserRouter  as Router, Route, Switch} from 'react-router-dom'
    import Menu from './pages/menu';
    import Item1 from './pages/menu/item1';
    import Item2 from './pages/menu/item2';

    export default class Routers extends Component {
      render() {
        return (
          <Router>
            <App>
              <Switch>
                <Route path="/menu" render={()=>
                    <Menu>
                        <Route path="/menu/item1/:id" component={Item1}></Route>
                      <Route path="/menu/item2/:id" component={Item2}></Route>
                    <Menu/>
                }></Route>
              </Switch>
            </App>
          </Router>
        )
      }
    }

   /* Menu组件 */
    import React, { Component } from 'react'
    import { Link } from 'react-router-dom'

    export default class Menu extends Component {
      render() {
        return (
          <div>
            <Link to="/menu/item1/123">item1</Link> <br/>
            <Link to="/menu/item2/456">item2</Link>
            <hr/>
            {this.props.children}
          </div>
        )
      }
    }
   /* Item1组件 */
  import React, { Component } from 'react'

  export default class Item1 extends Component {
    render() {
      return (
        <div>
          this is Item1 page;
          {this.props.match.params.id}  
        </div>
      )
    }
  }
  
 19 React中组件形式

  类class声明的组件(类组件/容器组件)
  
  函数式声明的组件(函数组件/无状态组件/UI组件)
  
  样式化组件(styled-components)
20 无状态组件(没有ref属性)
 /*CusImg jsx   此组件只关心数据传递「props」，和状态无关*/
   const CusImg = (props)=>(
      <div className={props.style}>
        <img src={props.imgurl}/>
        <text className={props.textStyle}>{props.text}</text>
        <div className={CusImg.counter}>{props.text}</div>
      </div>
   );
    module.exports = CusImg
 /*CusImg.module.css || CusImg.module.scss  在使用create-react-app脚手架创建的项目后,该项目是支持css-module的 相当于vue 中的scoped */
   .counter{
    text-align: center;
    }
    .spanText{
        padding: 0 15px;
    }
    .textStyle{
        background:red;
        width:200px;
        height:100px;
    }
    /*传统的组件调用方式  无状态组件性能确实比有状态的性能高，但是只是提高了 6% 左右 */
    <CusImg   style={CusImg.spanText} textStyle={CusImg.textStyle}   imgurl={require('../imgs/qcord.png')}  text="二维码" />
    /*render 方法调用无状态组件性能提高了 60% 左右 */  
     {CusImg({
           style:CusImg.root ,
           textStyle:CusImg.textStyle,
           imgurl:require('../imgs/qcord.png'),
           text:"二维码"
      })}     
        
         
21 React中组件样式形式

  在JSX上添加style属性定义行内样式
  const btnStyle = {
      width: '100px',
      height: '40px',
      borderRadius: '3px',
      outline: 'none',
      border: 'none',
      cursor: 'pointer',
      background: '#abcdef',
      color: '#fff'
    }
    <Fragment>
        <button style = { btnStyle }>button按钮</button>
        <button style = {{width:'200px';height:'20px'}}>button按钮</button>
    </Fragment>

  通过import关键字引入外部样式  (推荐使用css-module)  
   1 样式文件的名称必须以xxx.module.css或者xxx.module.scss的形式命名:例如styles.module.css或者styles.module.scss

   2 以变量的形式导入样式文件,比如:import styles from './style.module.css',如果是直接导入xxx.css,在JSX元素上的className的属性名称,是无法通过变      量,对象引入样式的,如果是直接引入样式,则在className的属性值中直接引入类名即可

   3 className以变量引用的方式进行添加,例如:className ={styles.counter}

   4 使用sass时,脚手架创建的项目,默认是支持sass的,使用时只需要安装一下node-sass这个包即可
  
  
